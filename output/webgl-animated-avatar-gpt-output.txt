

<script type="module">
import * as THREE from 'three';

import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
import { TransformControls } from 'three/addons/controls/TransformControls.js';
import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
import { DRACOLoader } from './jsm/animation/CCDIKSolver.js';
import Stats from 'three/addons/libs/stats.module.js';
import { GUI } from 'three/addons/libs/lil-gui.module.min.js';

let scene, camera, renderer, orbitControls, transformControls;
let mirrorSphereCamera;

const OOI = {};
let IKSolver;

let stats, gui, conf;
const v0 = new THREE.Vector3();

init().then( animate );

async function init() {

    conf = {
        followSphere: false,
        turnHead: true,
        ik_solver: true,
        update: updateIK
    };

    scene = new THREE.Scene();
    scene.fog = new THREE.FogExp2( 0xffffff, .17 );
    scene.background = new THREE.Color( 0xdddddd );

    camera = new THREE.PerspectiveCamera( 55, window.innerWidth / window.innerHeight, 0.001, 5000 );
    camera.position.set( 0.9728517749133652, 1.1044765132727201, 0.7316689528482836 );
    camera.lookAt( scene.position );

    const ambientLight = new THREE.AmbientLight( 0xffffff, 8 ); // soft white light
    scene.add( ambientLight );

    renderer = new THREE.WebGLRenderer( { antialias: true, logarithmicDepthBuffer: true } );
    renderer.setPixelRatio( window.devicePixelRatio );
    renderer.setSize( window.innerWidth, window.innerHeight );
    renderer.outputEncoding = THREE.sRGBEncoding;
    renderer.useLegacyLights = false;
    document.body.appendChild( renderer.domElement );

    stats = new Stats();
    document.body.appendChild( stats.dom );

    orbitControls = new OrbitControls( camera, renderer.domElement );
    orbitControls.minDistance = 0.2;
    orbitControls.maxDistance = 1.5;
    orbitControls.enableDamping = true;

    const dracoLoader = new DRACOLoader();
    dracoLoader.setDecoderPath( 'jsm/libs/draco/' );
    const gltfLoader = new GLTFLoader();
    gltfLoader.setDRACOLoader( dracoLoader );

    const gltf = await gltfLoader.loadAsync( 'models/gltf/kira.glb' );
    gltf.scene.traverse( n => {

        if ( n.name === 'head' ) OOI.head = n;
        if ( n.name === 'lowerarm_l' ) OOI.lowerarm_l = n;
        if ( n.name === 'Upperarm_l' ) OOI.Upperarm_l = n;
        if ( n.name === 'hand_l' ) OOI.hand_l = n;
        if ( n.name === 'target_hand_l' ) OOI.target_hand_l = n;

        if ( n.name === 'boule' ) OOI.sphere = n;
        if ( n.name === 'Kira_Shirt_left' ) OOI.kira = n;

    } );
    scene.add( gltf.scene );

    orbitControls.target.copy( OOI.sphere.position ); // orbit controls lookAt the sphere
    OOI.hand_l.attach( OOI.sphere );

    // mirror sphere cube-camera
    const cubeRenderTarget = new THREE.WebGLCubeRenderTarget( 1024 );
    mirrorSphereCamera = new THREE.